= Nginx Variables (04) =

Even if an Nginx variable is hooked with "get handler", it can opt-in to
use the value container as cache, so that even when a variable is read
multiple
times, "get handler" is executed only once. Here is an example:

    :nginx
    map $args $foo {
        default     0;
        debug       1;
    }

    server {
        listen 8080;

        location /test {
            set $orig_foo $foo;
            set $args debug;

            echo "orginal foo: $orig_foo";
            echo "foo: $foo";
        }
    }

Module L<ngx_map> and its command L<ngx_map/map> is new, so let me explain.
Command L<ngx_map/map> in Nginx defines a mapping between two Nginx variables.
Referring back to our example, command L<ngx_map/map> defines the mapping
from
built-in variable L<ngx_core/$args> to user variable C<$foo>. In other
words,
the value of C<$foo> is decided by the value of L<ngx_core/$args>.

How exactly do we define this mapping?

    :nginx
    map $args $foo {
        default     0;
        debug       1;
    }

C<default>, found in the first line within curly bracket, defines the
default mapping rule. If no other rules can be applied, the mapping will
execute the default one, which assigns variable C<$foo> with value C<0>.
The second line in the curly bracket defines another rule, which assigns
variable C<$foo> with value C<1> when the built-in variable L<ngx_core/$args>
equals the string C<debug>. Therefore, variable C<$foo> is either C<0>
or
C<1>, depending on whether L<ngx_core/$args> equals the string C<debug>.

Now we've got that cleared up, back to our C<location /test>. We save the
value of C<$foo> to another user variable C<$orig_foo> and forcefully overwrite
the value of L<ngx_core/$args> as C<debug>. Lastly, we print both C<$orig_foo>
and C<$foo> using L<ngx_echo/echo>.

When L<ngx_core/$args> is forcefully overwritten as C<debug>, we might
have
thought C<$foo> has the value C<1> according to our L<ngx_map/map> mappings,
but testing shows us otherwise:

    :bash
    $ curl 'http://localhost:8080/test'
    original foo: 0
    foo: 0

As expected, C<$orig_foo> is C<0>. Since the request has no URL parameters
and
L<ngx_core/$args> is empty, our default mapping rule comes into play and
C<$foo>
is assigned C<0>.

But the second output appears confusing, as L<ngx_core/args> is already
overwritten as C<debug>, our mapping rule should have assigned variable
C<$foo>
with value C<1>, what's wrong?

The reason is simple: when variable C<$foo> is needed the first time, its
calculated value from the mapping algorithm is cached. As we said in the
beginning, an Nginx module can opt-in to use a value container as a cache
for
the result of its "get handler". Apparently, L<ngx_map> caches the outcome
to
avoid further expensive calculation, so that Nginx can use the cached result
for that variable in the subsequent handling for free.

To verify this, we request again with an URL parameter C<debug>:

    :bash
    $ curl 'http://localhost:8080/test?debug'
    original foo: 1
    foo: 1

As expected, the value of C<$orig_foo> becomes C<1>. Since the built-in
variable
L<ngx_core/$args> equals C<debug>. Thus, according to our mapping rule,
variable
C<$foo> is calculated as C<1>, and the calculated result is cached and
remains
as C<1> no matter how L<ngx_core/$args> is modified subsequently.

Command L<ngx_map/map> is really doing more than it looks; the command
actually
hooks a "get handler" for user variables, and exposes the script interface
so
that exact devalue logic can be easily modified by the user themselves.
The price
of doing this, is to restrict the logic mapping from one variable to
another. Meanwhile, let's recall what we've learnt back in L<vartut/ (03)>:
even if a variable is devalued by a "get handler", it does not necessarily
use
the value container as cache, such as with the L<$arg_XXX> variables.

Just like module L<ngx_map>, another built-in module L<ngx_geo> uses a
cache for
variables.

We should have noticed that command L<ngx_map/map> is written before the
C<server> directive, i.e. the mappings are defined directly within C<http>.
Is
it possible to write it within a C<location> directive since it is used
only in
C<location /test> in our example? The answer is no!

People who have just learnt Nginx, would argue this global configuration
of
mappings by L<ngx_map/map>, is likely to be inefficient since a request
to
every C<location> will cause the mapping be repeatedly calculated. Have
no
worry and let us review, command L<ngx_map/map> actually defines a "get
handler" for a user variable - the get handler is only executed when the
variable needs to be devalued (and if a cache is used, the handler is executed
only once), therefore, for those requests to a particular C<location> which
does not use the variable, no calculation will be triggered.

This technique, which leaves calculation till the needed moment, is called
"lazy evaluation" in computing. "Lazy evaluation", contrary to "eager
evaluation", is not natively supported by most programming languages. The
classic example of one which does is Haskell. In the mini language of Nginx,
"eager evaluation" is far more common, such as in the following statement
using
L<ngx_rewrite/set>:

    :nginx
    set $b "$a,$a";

When variable C<$b> is declared by the command L<ngx_rewrite/set>, the
value of
C<$b> is computed right away, and the calculation won't be delayed until
variable C<$b> needs to be devalued.
