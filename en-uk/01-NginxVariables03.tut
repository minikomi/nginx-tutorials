= Nginx Variables (03) =

Some built-in variables are writable, and L<ngx_core/$args> is one of them.
The
variable gives the URL parameters (the part after the question mark) and
when
the variable is written, the parameters are virtually modified. Let's check
following example:

    :nginx
    location /test {
        set $orig_args $args;
        set $args "a=3&b=4";

        echo "original args: $orig_args";
        echo "args: $args";
    }

The original URL parameters are saved in C<$origin_args> variable, then
we
change the URL parameters by modifying L<ngx_core/$args>, and finally both
C<$orig_args> and L<ngx_core/$args> are printed by the L<ngx_echo/echo>
command. Launching a request to C</test>, we see the following result:

    :bash
    $ curl 'http://localhost:8080/test'
    original args: 
    args: a=3&b=4

    $ curl 'http://localhost:8080/test?a=0&b=1&c=2'
    original args: a=0&b=1&c=2
    args: a=3&b=4

In the first run, no URL parameters are sent in the request, and thus
C<$orig_args> has an empty value. Yet in both runs, URL parameters are
rewritten to C<a=3&b=4> no matter what the original request.

If we drill deeper, we will see that the variable L<ngx_core/$args>, like
L<$arg_XXX>, is not just a simple value container. In fact, whenever
L<ngx_core/$args> is devalued, Nginx core runs a chunk of code to calculate
it
from where the URL parameters are stored, and when the variable is written,
another chunk of code gets executed to overwrite this same storage. This
is the
guts of how it's actually implemented. Now let's run following test:

    :nginx
    location /test {
        set $orig_a $arg_a;
        set $args "a=5";
        echo "original a: $orig_a";
        echo "a: $arg_a";
    }

C<$orig_a> saves a copy of the original C<$arg_a>, which is the value of
URL
parameter C<a>. Then, L<ngx_core/$args> is rewritten as C<a=5> and finally
both
C<$orig_a> and C<$arg_a> are printed by the command L<ngx_echo/echo>. By
overwriting the variable L<ngx_core/$args> we are effectively modifying
the URL
parameters, and thus the built-in variable L<$arg_XXX> should have been
modified as well. This can be verified as following:

    :bash
    $ curl 'http://localhost:8080/test?a=3'
    original a: 3
    a: 5

Clearly, the URL parameter was C<a=3>, and the built-in variable C<$arg_a>
was
initialized with value C<3>. Right after L<ngx_core/$args> gets modified
as
C<a=5>, C<$arg_a> now has the value C<5>.

Modifying C<$args> has another side effect for the built-in HTTP proxy
module
L<ngx_proxy>:

    :nginx
    server {
        listen 8080;

        location /test {
            set $args "foo=1&bar=2";
            proxy_pass http://127.0.0.1:8081/args;
        }
    }

    server {
        listen 8081;

        location /args {
            echo "args: $args";
        }
    }

Two virtual servers are configured within a C<http> directive. One is listening
on port 8080, and it modifies the L<ngx_core/$args> variable, so that the
request URL parameter becomes C<foo=1&bar=2> as long as C</test> is requested.
Thereafter L<ngx_proxy> and its command L<ngx_proxy/proxy_pass> are used
to
proxy the request to the other virtual server, which is listening on port
8081
at location C</args>. By default when proxying occurs, URL parameters of
the
original request will be proxyed as well.

When the latter virtual server recieves the request on port 8081, it uses
command
L<ngx_echo/echo> to print the current URL parameters, so that we can check
what
was actually proxyed from C</test>. Let's check it out:

    :bash
    $ curl 'http://localhost:8080/test?blah=7'
    args: foo=1&bar=2

You might have noticed, the original request has URL parameter C<blah=7>,
but
it gets overwritten within C<location /test> as C<foo=1&bar=2>, so when
the
request is proxyed to the latter virtual server by L<ngx_proxy/proxy_pass>,
the
original URL parameter is gone and new value of L<ngx_core/$args> is printed.

The hook under the scene, for when an Nginx variable is retrieved, is called
"get handler", while the one in charge when an Nginx variable is written
is
called "set handler". Since different Nginx modules have the caliber to
provide
those handlers for their variables, variables become really powerful.

This technique is not uncommon in programming. One example is the class
designer, who enjoys Object-Oriented programming, seldom exposes their
class
member variables, instead two accessor methods are provided respectively
for
read and write. A simple C++ case:

    :cpp
    #include <string>
    using namespace std;

    class Person {
    public:
        const string get_name() {
            return m_name;
        }

        void set_name(const string name) {
            m_name = name;
        }

    private:
        string m_name;
    };

Two public methods C<get_name> and C<set_name> are provided; they are the
accessor methods for the private member variable C<m_name>.

This design has great flexibility, as any logic can be inserted into an
"accessor method" if necessary. For example, we could update other member
variables who have dependences, or modify directly a corresponding table
in
a database. In the latter case, "accessor method" might not have a member
variable at all, or probably its sole purpose is to cache what the database
returns.

Like the "accessor methods" in Object-Oriented programming, Nginx variables
are
bounded with "set/get handlers". When an Nginx method declares its variables,
it has the option to allocate a value container or hook into "set/get
handlers".

Not every Nginx variable has a value container. For those who do, they
are
called "indexed" in Nginx core. Otherwise they are called "non-indexed"
.

As we learnt from L<vartut/(02)>, variable with a category like L<$arg_XXX>
are
non-indexed, and reading and writing of those variables are executed through
"set/get handlers", i.e. by calculating the URL parameters at run time.

Newbies might imagine those URL parameters are parsed once and for all,
and the
corresponding L<$arg_XXX> variables are accordingly declared and initialized.
Well, take care because this is false. Nginx does not parse a URL parameter
sequence beforehand, instead it calculates it when an L<$arg_XXX> needs
to be
devalued through the "set/get handler". The same approach applies to
L<$cookie_XXX> variables too, its "set/get handler" calculates from the
C<Cookie> headers at the run time.
