= Nginx Variables (05) =

In L<vartut/ (02)> we learnt that variable life cycle is bounded with the
request, but I owe you a formal definition of "request". Without a further
explaination, you might have assumed that "request" refers to the HTTP
request
initiated by the client. But, there are actually two types of "request"
in
Nginx world. One is called the "main request", the other "subrequest".
Now
let's wire them in.

The "main request" is the request initiated by a HTTP client from outside
Nginx.
All requests we've been discussing are "main requests", including the internal
"jump" introduced in L<vartut/ 02), which uses command L<ngx_echo/echo_exec>
and L<ngx_rewrite/rewrite>

In contrast, a "subrequest" is a type of cascading request issued by Nginx
from
within its internals. A subrequest is encapsulated just like a HTTP request,
but it has absolutely nothing to do with the HTTP protocol and networking.
A Subrequest is a useful abstraction in Nginx design, to ease the decomposition
of a "main request" into a few "internal requests" with finer granularity.
A subrequest can be issued to multiple C<location> interfaces sequentially
or
in parallel, and handles the main request by collaborating their respective
outcomes.  Certainly, a subrequest can be further decomposed into other
subrequests, and a subrequest can even form a recursive pattern by cascading
the request to itself.  When a request issues its subrequests, it is called
a "parent request" in Nginx terminology. As a footnote, for those familiar
with
Apache, a subrequest is defined equivalently, and not totally a stranger.

Let's check a subrequest example:

    :nginx
    location /main {
        echo_location /foo;
        echo_location /bar;
    }

    location /foo {
        echo foo;
    }

    location /bar {
        echo bar;
    }

Now in C<location /main>, two subrequests are sent to C</foo> and C</bar>
via
the 3rd party module L<ngx_echo> and its command L<ngx_echo/echo_location>.
The subrequests are of type HTTP C<GET>. When they are sent by
L<ngx_echo/echo_location> the requests are executed sequentially, in the
order
they are written, which means C</bar> is sub-requested only when C</foo>
has
finished its part. The outcome from the subrequests will be concatenated
as
the final response of C</main>:

    :bash
    $ curl 'http://localhost:8080/main'
    foo
    bar

As we can see, subrequest is issued within a virtual server, i.e. subrequest
handling is implemented as a few C API calls, without any networking nor
UNIX
sockets, therefore subrequest execution is extremely fast.

Back to the very initial subject of a Nginx variable's life cycle, we can
still
safely conclude that it is bounded within the current request and every
request has
an isolated copy of variables. However, the request can be either a "main
request" or
a "subrequest". Even if the "parent request" and "subrequest" share the
same
variable name, they are virtually different variables. We can verify this
with
following test:

    :nginx
    location /main {
        set $var main;

        echo_location /foo;
        echo_location /bar;

        echo "main: $var";
    }

    location /foo {
        set $var foo;
        echo "foo: $var";
    }

    location /bar {
        set $var bar;
        echo "bar: $var";
    }

In this test, the same variable C<$var> is declared in C<location /main>,
C<location /foo> and C<location /bar> but is initialized with different
values.
Furthermore, we print the value of variable C<$var> within C</main> after
two subrequests are handled. Then we issue a request to C</main>:

    :bash
    $ curl 'http://localhost:8080/main'
    foo: foo
    bar: bar
    main: main

Apparently, when the subrequests are handled in C</foo> and C</bar>,
they both have no impact on the value of C<$var> and the main requesting
handling
in C</main>, again subrequests themselves have no impact on each other.
So we
have asserted that "main request" and every other subrequest each has its
own
copies of C<$var>.

Unfortunately, there exists exceptions. Some Nginx module might issue a
subrequest which references the same copy of variables of their parent
request. The
3rd party module L<ngx_auth_request> is one of them:

    :nginx
    location /main {
        set $var main;
        auth_request /sub;
        echo "main: $var";
    }

    location /sub {
        set $var sub;
        echo "sub: $var";
    }

Variable C<$var> is declared and initialized with value C<main> in C<location
/main>
then a subrequest is issued via module L<ngx_auth_request> and its command
L<ngx_auth_request/auth_request>, finally we print variable C<$var> using
command L<ngx_echo/echo>.
Now we reset variable C<$var> as C<sub> in C<location /sub> and check what
our test says:

    :bash
    $ curl 'http://localhost:8080/main'
    main: sub

It says, C<$var> has become C<sub> back in its main request to C<location
/main>, which means
the subrequest issued by L<ngx_auth_request> module shares exactly the
same copy of variables
with its parent request.

Wait a minute, you might exclaim, why is the print within the subrequest
to C<location
/sub> missing?
Good gotcha and the answer is simple, command L<ngx_auth_request/auth_request>
ignores the responses
from its subrequest, instead all it cares about is the status code from
the subrequest
(the subrequest is
ecapsulated as a HTTP request). When the status code C<2XX> is returned,
the handling
of the main request continues,
otherwise the handling gets aborted and an error is returned. In our example,
the subrequest only executes
a print by L<ngx_echo/echo>, which implicitly returns status code C<200>.

Surely it seems easier to always share variables in between a parent request
and subrequest, like module
L<ngx_auth_request> does. But if we do, you can expect the side effects
to haunt you with bugs and
other consequences when the configuration
scales and becomes complicated. It's simply too hard to trace a variable
when
its value gets overwritten in
some subrequests. To help us keep our sanity, modules like L<ngx_echo>,
L<ngx_lua>
and L<ngx_srcache> and many
other 3rd party module choose not to share variables in between requests.

