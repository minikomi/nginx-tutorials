= Nginx Variables (02) =

One common misunderstanding about Nginx variables is to think the life
cycle
is bounded within the C<Location> directive. Let's test this by checking
another example:

    :nginx
    server {
        listen 8080;

        location /foo {
            set $a hello;
            echo_exec /bar;
        }

        location /bar {
            echo "a = [$a]";
        }
    }

We use the 3rd party module L<ngx_echo> and its command L<ngx_echo/echo_exec>
to execute C<location /bar> from within C<location /foo>. The mechanism
is like
"jumping" from one C<location> to another C<location> in Nginx internally
when
handling a specific request. This is different from HTTP C<301> and C<302>
redirect, which conducts the external jump by collaborating with the HTTP
client.

External redirects can be asserted to indicate when the requested URL has
been
modified. In contrast, Nginx internal jumps have no impact on the client
side
and, just like the C<exec> command found in C<Bourne Shell> (or C<Bash>),
the
execution path has no returns. Another closely related schema is the C<goto>
statement in C<C>.

Being an internal jump between the C<location> directives for Nginx processing,
the request remains the same as the original one, and thus its copy of
declared
variables also remains unchanged.

Back to our example, if C</foo> is requested, the processing progresses
like
so:

Variable C<$a> is declared and initialized with the string value C<hello>
by
L<ngx_rewrite/set> within the C<location> directive. There is then an internal
jump caused by L<ngx_echo/echo_exec>, and processing continues from
C<location/bar>.  Since C<$a> in the latter case is the same C<$a> variable
initialized earlier, we can expect the outcome is C<hello> when variable
C<$a>
is printed in the new location. Let's check this result with a request:

    :bash
    $ curl localhost:8080/foo
    a = [hello]

If, however, the C</bar> is requested directly, C<$a> still has an empty
value
because it is initialized in C<location /foo> only.

The example shows that when a request is being handled, even across multiple
C<location> directives, its copy of Nginx variables is not reconstructed.
When
considering "internal jumps" it is also worth of noting that the built-in
L<ngx_rewrite> module, and its command L<ngx_rewrite/rewrite>, can execute
exactly the same kind of internal jump. To rewrite our example:

    :nginx
    server {
        listen 8080;

        location /foo {
            set $a hello;
            rewrite ^ /bar;
        }

        location /bar {
            echo "a = [$a]";
        }
    }

For now, it is enough to know that the net effect is no different to if
we had
used L<ngx_echo/echo_exec>.  L<ngx_rewrite/rewrite> will be addressed more
specifically later, for its usage in C<301> and C<302> redirects.

Again, we have shown that Nginx variable's life time is bounded with the
request being handled and it has nothing to do with C<location> directives.

So far, the variables we have discussed are implicitly created by
L<ngx_rewrite/set>. They are called "user defined variables" or simply
"user
variables". Besides variables defined by user, Nginx core and various Nginx
modules can provide "pre-defined variables" or "built-in variables".

Built-in variables are mostly used to provide request or response information.
For instance, the built-in variable L<ngx_core/$uri>, declared by the
L<ngx_http_core> module, gives the URI of the request being handled
(url-decoded and excluding request parameters).  Another built-in variable
L<ngx_core/$request_uri> gives the original request URI (url-encoded and
including request parameters). Another example:

    :nginx
    location /test {
        echo "uri = $uri";
        echo "request_uri = $request_uri";
    }

For the sake of clarity, the C<server> directive is omitted. This example
creates a server listening on the usual C<8080> port which prints the Nginx
built-in variables L<ngx_core/$uri> and L<ngx_core/$request_uri> in response
to
a request. Now let's see it in action by issuing a request to C<test>:

    :bash
    $ curl 'http://localhost:8080/test'
    uri = /test
    request_uri = /test

    $ curl 'http://localhost:8080/test?a=3&b=4'
    uri = /test
    request_uri = /test?a=3&b=4

    $ curl 'http://localhost:8080/test/hello%20world?a=3&b=4'
    uri = /test/hello world
    request_uri = /test/hello%20world?a=3&b=4

There is another category of built-in variables which are prefixed with
C<arg_>, for example C<$arg_name>, which holds the url-encoded URI parameter
related to C<name>. Here is an example to illustrate this further:

    :nginx
    location /test {
        echo "name: $arg_name";
        echo "class: $arg_class";
    }

We test C</test> with a few scenarios, each with different URL parameter

    :bash
    $ curl 'http://localhost:8080/test'
    name: 
    class: 

    $ curl 'http://localhost:8080/test?name=Tom&class=3'
    name: Tom
    class: 3

    $ curl 'http://localhost:8080/test?name=hello%20world&class=9'
    name: hello%20world
    class: 9

C<$arg_name> is case-insensitive: it will match the to C<name> URL parameter,
as well as the parameters C<NAME> or C<Name>:

    $ curl 'http://localhost:8080/test?NAME=Marry'
    name: Marry
    class: 

    $ curl 'http://localhost:8080/test?Name=Jimmy'
    name: Jimmy
    class: 

Nginx lower-cases all URL parameter keys before it declares those built-in
variables.

A 3rd party module L<ngx_set_misc> and its command
L<ngx_set_misc/set_unescape_uri> can execute URL decoding for string sequences
like C<%XX>

    :nginx
    location /test {
        set_unescape_uri $name $arg_name;
        set_unescape_uri $class $arg_class;

        echo "name: $name";
        echo "class: $class";
    }

Again:

    :bash
    $ curl 'http://localhost:8080/test?name=hello%20world&class=9'
    name: hello world
    class: 9

White space is decoded!

As we can see, the command L<ngx_set_misc/set_unescape_uri> is like the
command
L<ngx_rewrite/set> in that it has the capability to declare and initialize
previously undeclared Nginx variables. Later on we will discuss more about
the
L<ngx_rewrite/set> module.

Variables like L<$arg_XXX>, are declared specifically within Nginx core.
No 3rd
party module can have equivalent capabilities. Other similar categories
of
variables are those prefixed C<$cookie_XXX> (to retrieve cookies), L<$http_XXX>
(received http headers) and L<$sent_http_XXX> (response headers). Please
reference the official documentation of L<ngx_http_core> module for details.

It is important to note that many built-in variables are read-only. For
example, the ones we have just introduced: L<ngx_core/$uri> and
L<ngx_core/$request_uri>.  One must avoid assigning values to read-only
variables, unless you enjoy surprises:

    :nginx
    ? location /bad {
    ?     set $uri /blah;
    ?     echo $uri;
    ? }

This problematic configuration dumps a fatal error when Nginx is started
and
presents us with the following cryptic message:

    [emerg] the duplicate "uri" variable in ...

An attempt to write other read-only variables such as L<$arg_XXX> variables
can
blow the Nginx process right away in a few particular releases.